import cc.arduino.*;
import processing.serial.*;
import gab.opencv.*;
import processing.video.*;
import ddf.minim.*;
import java.awt.*;

Minim minim;
AudioPlayer player;

Arduino arduino;
Capture video;
OpenCV opencv;

// Servo variables
int servoPin = 2;
int servoAngle_value;
int faceX; // X-coordinate of the face center
int faceY; // Y-coordinate of the face center
// Used for converting from pixels to angles
int minServoAngle = 180;
int maxServoAngle = 0;
// LED pin numbers
int[] ledPins = {5, 6, 7}; // LED lights
int cameraIndex = 1; // Change this index to pick a different camera



// Set your audio file name here
String audioName = "WhatsApp Audio 2023-11-20 at 11.06.17.mp3";

// Array of volume levels for each section
float[] sectionVolumes = {0, 0.03, 0.7, 1.0, 15, 20, 100};

void setup() {
  size(640, 480); // Size should match the video's dimensions
  printArray(Arduino.list());  // List COM-ports

  // Camera selection logic
  String[] cameras = Capture.list();
  printArray(cameras);
  if (cameras.length > 0 && cameraIndex < cameras.length) {
    video = new Capture(this, cameras[cameraIndex]);
  } else {
    println("Camera index is out of bounds.");
    exit();
  }
  video.start();

  opencv = new OpenCV(this, 640, 480);
  opencv.loadCascade(OpenCV.CASCADE_FRONTALFACE);

  // Initialize connection to Arduino
  printArray(Arduino.list());
  arduino = new Arduino(this, Arduino.list()[0], 57600);

  // Set servo pin as output
  arduino.pinMode(servoPin, Arduino.SERVO);

  // Set LED pins as outputs
  for (int i = 0; i < ledPins.length; i++) {
    arduino.pinMode(ledPins[i], Arduino.OUTPUT);
  }

  // Initialize Minim and load the audio file
  minim = new Minim(this);
  player = minim.loadFile(audioName);
  
  
}

void draw() {
  opencv.loadImage(video);

  image(video, 0, 0);

  Rectangle[] faces = opencv.detect();

  int sectionWidth = width / 6; // Dynamically calculate the width of each section

  // Turn off all LEDs
  for (int i = 0; i < ledPins.length; i++) {
    arduino.digitalWrite(ledPins[i], Arduino.LOW);
  }
  // Check if a face is detected and which section it is in
  if (faces.length > 0) {
    int faceX = faces[0].x + faces[0].width / 2; // Center of the first detected face

    //Thx Yanjia!!!!!<3~
    for (int i = 0; i < 7.; i++) {
      //arduino.digitalWrite(ledPins[i], Arduino.HIGH);
      if (faceX > sectionWidth * i && faceX < sectionWidth * (i + 1)) {
        fill(255, 0, 0, 100); // Red color for active section
        arduino.digitalWrite(ledPins[0], Arduino.HIGH);
        arduino.digitalWrite(ledPins[1], Arduino.HIGH);
        arduino.digitalWrite(ledPins[2], Arduino.HIGH);
        
        // Check if the audio is playing, and play if not
        if (!player.isPlaying()) {
          player.play();        
        }
      } else {
        noFill(); // White color for inactive sections
      }
      noStroke();
      rect(sectionWidth * i, 0, sectionWidth, height); // Adjust height as needed
    }
  } else {
    // No face detected, stop playing audio
    player.pause();  
  }
  // Draw rectangles around detected faces
  noFill();
  stroke(0, 255, 0);
  strokeWeight(3);
  for (Rectangle face : faces) {
    rect(face.x, face.y, face.width, face.height);
  }

  // Additional code for servo control
  noFill();
  stroke(0, 255, 0);
  strokeWeight(3);

  if (faces.length > 0) {
    // Assuming only one face is present, get the x-coordinate of the center of the first face
    faceX = faces[0].x + faces[0].width / 2;
    faceY = faces[0].y + faces[0].height / 2;
    //rect(faces[0].x, faces[0].y, faces[0].width, faces[0].height);

    // Convert faceX to a servo angle
    servoAngle_value = round(map(faceX, 0, width, minServoAngle, maxServoAngle));
    arduino.servoWrite(servoPin, servoAngle_value);

    // Draw a bright pink vertical line at the face center
    stroke(255, 20, 147); // Bright pink color
    line(faceX, 0, faceX, height);
  }

  // Display face position and servo angle
  text("Face X: " + faceX, faceX+20, faceY);
  text("Servo: " + servoAngle_value, faceX+20, faceY+30);
}

void captureEvent(Capture c) {
  c.read();
}
