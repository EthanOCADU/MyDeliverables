/* DIGF-3010 Advanced Wearables 2023
  Kate Hartman
  4 digital inputs to activate 4 keyboard keys
  no resistor needed
  Based on Keyboard library examples
 */
// ↑ I'll leave them here, thank you Professor Kate
//————————————————————————————————————————————————————————————————————————————————————————————————————————————
//————————————————————————————————————————————————————————————————————————————————————————————————————————————

#include "Keyboard.h"
#include <Adafruit_NeoPixel.h>


#define DEBOUNCE 50  // delay for ensuring that the button presses do not overlap
#define LED_PIN    8
#define LED_COUNT 1

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

// Variables that won't change

const int buttonPin1 = 9;
const int buttonPin2 = 6;
const int buttonPin3 = 10;
const int buttonPin4 = 12;

const int keyboardKey1 = KEY_UP_ARROW;
const int keyboardKey2 = KEY_DOWN_ARROW;
const int keyboardKey3 = KEY_LEFT_ARROW;
const int keyboardKey4 = KEY_RIGHT_ARROW;


// Variables that will change

int buttonValue1 = 1;
int buttonValue2 = 1;
int buttonValue3 = 1;
int buttonValue4 = 1;


// LED Strip Effects

class Strip
{
public:
  uint8_t   effect;
  uint8_t   effects;
  uint16_t  effStep;
  unsigned long effStart;
  Adafruit_NeoPixel strip;
  Strip(uint16_t leds, uint8_t pin, uint8_t toteffects, uint16_t striptype) : strip(leds, pin, striptype) {
    effect = -1;
    effects = toteffects;
    Reset();
  }
  void Reset(){
    effStep = 0;
    effect = (effect + 1) % effects;
    effStart = millis();
  }
};

struct Loop
{
  uint8_t currentChild;
  uint8_t childs;
  bool timeBased;
  uint16_t cycles;
  uint16_t currentTime;
  Loop(uint8_t totchilds, bool timebased, uint16_t tottime) {currentTime=0;currentChild=0;childs=totchilds;timeBased=timebased;cycles=tottime;}
};

Strip strip_0(60, 8, 60, NEO_GRB + NEO_KHZ800);
struct Loop strip0loop0(1, false, 1);

void setup() {

  // initialize the buttons' inputs:
  pinMode(buttonPin1, INPUT_PULLUP);
  pinMode(buttonPin2, INPUT_PULLUP);
  pinMode(buttonPin3, INPUT_PULLUP);
  pinMode(buttonPin4, INPUT_PULLUP);

  // initialize serial
  Serial.begin(9600);
  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.show();            // Turn OFF all pixels ASAP
  strip.setBrightness(50); // Set BRIGHTNESS to about 1/5 (max = 255)
  strip_0.strip.begin();
  Keyboard.begin();
}

void loop() {

  // read all button pins
  buttonValue1 = digitalRead(buttonPin1);
  buttonValue2 = digitalRead(buttonPin2);
  buttonValue3 = digitalRead(buttonPin3);
  buttonValue4 = digitalRead(buttonPin4);
  strip.setPixelColor(50, strip.Color(0, 0, 255)); // Blue

  // use the button values to control  keyboard
  if (buttonValue1 == LOW) {
    Keyboard.press(keyboardKey1);
    Serial.println("Button 1 pressed ↑");
    strip.setPixelColor(0, strip.Color(200, 211, 254)); // color when BUTTON is connected
  strip.show();  
  }
  else{
    Keyboard.release(keyboardKey1);
  }

  if (buttonValue2 == LOW) {
    Keyboard.press(keyboardKey2);
    Serial.println("Button 2 pressed ↓");
    strip.setPixelColor(0, strip.Color(200, 211, 254)); // color when BUTTON is connected
  strip.show();  
  }
  else{
    Keyboard.release(keyboardKey2);
  }

  if (buttonValue3 == LOW) {
    Keyboard.press(keyboardKey3);
    Serial.println("Button 3 pressed-LEFT");
    strip.setPixelColor(0, strip.Color(200, 211, 254)); // color when BUTTON is connected
  strip.show(); 
  }
  else{
    Keyboard.release(keyboardKey3);
  }

  if (buttonValue4 == LOW) {
    Keyboard.press(keyboardKey4);
    Serial.println("Button 4 pressed-RIGHT");
    strip.setPixelColor(0, strip.Color(200, 211, 254)); // color when BUTTON is connected
  strip.show(); 
  }
  else{
    Keyboard.release(keyboardKey4);
  }
  


  delay(DEBOUNCE);  // delay in between reads for stability
  strips_loop();
  
}

void strips_loop() {
  if(strip0_loop0() & 0x01)
    strip_0.strip.show();
}



//————————————————————————————————————————————————————————————————————————————————————————————————————————————
//————————————————————————————————————————————————————————————————————————————————————————————————————————————
// LED Strip Effects Generator - https://adrianotiger.github.io/Neopixel-Effect-Generator/

uint8_t strip0_loop0() {
  uint8_t ret = 0x00;
  switch(strip0loop0.currentChild) {
    case 0: 
           ret = strip0_loop0_eff0();break;
  }
  if(ret & 0x02) {
    ret &= 0xfd;
    if(strip0loop0.currentChild + 1 >= strip0loop0.childs) {
      strip0loop0.currentChild = 0;
      if(++strip0loop0.currentTime >= strip0loop0.cycles) {strip0loop0.currentTime = 0; ret |= 0x02;}
    }
    else {
      strip0loop0.currentChild++;
    }
  };
  return ret;
}

uint8_t strip0_loop0_eff0() {
    // Strip ID: 0 - Effect: Rainbow - LEDS: 60
    // Steps: 180 - Delay: 20
    // Colors: 4 (0.0.255, 0.255.255, 0.0.255, 0.0.0)
    // Options: rainbowlen=1, toLeft=true, 
  if(millis() - strip_0.effStart < 20 * (strip_0.effStep)) return 0x00;
  float factor1, factor2;
  uint16_t ind;
  for(uint16_t j=0;j<60;j++) {
    ind = strip_0.effStep + j * 180;
    switch((int)((ind % 180) / 45)) {
      case 0: factor1 = 1.0 - ((float)(ind % 180 - 0 * 45) / 45);
              factor2 = (float)((int)(ind - 0) % 180) / 45;
              strip_0.strip.setPixelColor(j, 0 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 255 * factor1 + 255 * factor2);
              break;
      case 1: factor1 = 1.0 - ((float)(ind % 180 - 1 * 45) / 45);
              factor2 = (float)((int)(ind - 45) % 180) / 45;
              strip_0.strip.setPixelColor(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 255 * factor1 + 255 * factor2);
              break;
      case 2: factor1 = 1.0 - ((float)(ind % 180 - 2 * 45) / 45);
              factor2 = (float)((int)(ind - 90) % 180) / 45;
              strip_0.strip.setPixelColor(j, 0 * factor1 + 0 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
              break;
      case 3: factor1 = 1.0 - ((float)(ind % 180 - 3 * 45) / 45);
              factor2 = (float)((int)(ind - 135) % 180) / 45;
              strip_0.strip.setPixelColor(j, 0 * factor1 + 0 * factor2, 0 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
              break;
    }
  }
  if(strip_0.effStep >= 180) {strip_0.Reset(); return 0x03; }
  else strip_0.effStep++;
  return 0x01;
}
